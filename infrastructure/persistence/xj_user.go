// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package persistence

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// XJUser is an object representing the database table.
type XJUser struct {
	ID uint `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ks号
	XJID uint `boil:"xj_id" json:"xj_id" toml:"xj_id" yaml:"xj_id"`
	// 手机号
	Phone string `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	// 密码
	PWD string `boil:"pwd" json:"pwd" toml:"pwd" yaml:"pwd"`
	// 昵称
	Nickname null.String `boil:"nickname" json:"nickname,omitempty" toml:"nickname" yaml:"nickname,omitempty"`
	// 手机品牌
	Brand string `boil:"brand" json:"brand" toml:"brand" yaml:"brand"`
	// 手机串号
	IMEI string `boil:"IMEI" json:"IMEI" toml:"IMEI" yaml:"IMEI"`
	// 注册日期
	Regdate time.Time `boil:"regdate" json:"regdate" toml:"regdate" yaml:"regdate"`
	// 性别
	Gender null.String `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`
	// 年龄
	Age null.Int8 `boil:"age" json:"age,omitempty" toml:"age" yaml:"age,omitempty"`
	// 出生年月日
	Birthday null.String `boil:"birthday" json:"birthday,omitempty" toml:"birthday" yaml:"birthday,omitempty"`
	// 身高（厘米）
	Height null.String `boil:"height" json:"height,omitempty" toml:"height" yaml:"height,omitempty"`
	// 体重（公斤）
	Weight null.String `boil:"weight" json:"weight,omitempty" toml:"weight" yaml:"weight,omitempty"`
	// 电子邮箱地址
	Email null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	// 注册类型  1：手机  2：微信 3：微博 4：QQ 5：邮箱
	RegType null.String `boil:"reg_type" json:"reg_type,omitempty" toml:"reg_type" yaml:"reg_type,omitempty"`
	// 注册ip
	RegIP null.String `boil:"reg_ip" json:"reg_ip,omitempty" toml:"reg_ip" yaml:"reg_ip,omitempty"`
	// 头像地址
	Avatar null.String `boil:"avatar" json:"avatar,omitempty" toml:"avatar" yaml:"avatar,omitempty"`
	// 头像地址
	AvatarBig null.String `boil:"avatar_big" json:"avatar_big,omitempty" toml:"avatar_big" yaml:"avatar_big,omitempty"`
	// 省份
	Province null.String `boil:"province" json:"province,omitempty" toml:"province" yaml:"province,omitempty"`
	// 个性签名
	MySlogan null.String `boil:"my_slogan" json:"my_slogan,omitempty" toml:"my_slogan" yaml:"my_slogan,omitempty"`
	// 城市
	City null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	// 扩展字段，一般不用
	Extradata null.String `boil:"extradata" json:"extradata,omitempty" toml:"extradata" yaml:"extradata,omitempty"`
	// 状态（1，可用；0，禁用）
	Status null.Bool `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	// 经度
	LNG types.NullDecimal `boil:"lng" json:"lng,omitempty" toml:"lng" yaml:"lng,omitempty"`
	// 纬度
	Lat       types.NullDecimal `boil:"lat" json:"lat,omitempty" toml:"lat" yaml:"lat,omitempty"`
	Logintime null.Time         `boil:"logintime" json:"logintime,omitempty" toml:"logintime" yaml:"logintime,omitempty"`
	// 最后登录时间
	LastLogintime null.Time `boil:"last_logintime" json:"last_logintime,omitempty" toml:"last_logintime" yaml:"last_logintime,omitempty"`
	// 商用跑步机appkey
	Appkey null.String `boil:"appkey" json:"appkey,omitempty" toml:"appkey" yaml:"appkey,omitempty"`
	// 跑步机序列号
	Tuuid null.String `boil:"tuuid" json:"tuuid,omitempty" toml:"tuuid" yaml:"tuuid,omitempty"`
	// 是否设置引导页（0，未设置；1，已设置）
	Guide null.Bool `boil:"guide" json:"guide,omitempty" toml:"guide" yaml:"guide,omitempty"`
	// 跑步机用户表示（0，不是；2，是）
	RunType null.Uint8 `boil:"runType" json:"runType,omitempty" toml:"runType" yaml:"runType,omitempty"`
	// 未绑定手机号
	NoPhone null.Int8 `boil:"no_phone" json:"no_phone,omitempty" toml:"no_phone" yaml:"no_phone,omitempty"`
	// 重量单位：1公斤，2市斤
	UnitOfWeight null.Int8 `boil:"unit_of_weight" json:"unit_of_weight,omitempty" toml:"unit_of_weight" yaml:"unit_of_weight,omitempty"`
	// a1pro新手引导页
	GuideA1pro null.String `boil:"guide_a1pro" json:"guide_a1pro,omitempty" toml:"guide_a1pro" yaml:"guide_a1pro,omitempty"`
	// 邮箱激活状态 0 未激活 1已激活
	Active null.Int8 `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	// 友盟token
	DeviceToken  null.String `boil:"deviceToken" json:"deviceToken,omitempty" toml:"deviceToken" yaml:"deviceToken,omitempty"`
	WeightTarget null.String `boil:"weight_target" json:"weight_target,omitempty" toml:"weight_target" yaml:"weight_target,omitempty"`

	R *xjUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L xjUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var XJUserColumns = struct {
	ID            string
	XJID          string
	Phone         string
	PWD           string
	Nickname      string
	Brand         string
	IMEI          string
	Regdate       string
	Gender        string
	Age           string
	Birthday      string
	Height        string
	Weight        string
	Email         string
	RegType       string
	RegIP         string
	Avatar        string
	AvatarBig     string
	Province      string
	MySlogan      string
	City          string
	Extradata     string
	Status        string
	LNG           string
	Lat           string
	Logintime     string
	LastLogintime string
	Appkey        string
	Tuuid         string
	Guide         string
	RunType       string
	NoPhone       string
	UnitOfWeight  string
	GuideA1pro    string
	Active        string
	DeviceToken   string
	WeightTarget  string
}{
	ID:            "id",
	XJID:          "xj_id",
	Phone:         "phone",
	PWD:           "pwd",
	Nickname:      "nickname",
	Brand:         "brand",
	IMEI:          "IMEI",
	Regdate:       "regdate",
	Gender:        "gender",
	Age:           "age",
	Birthday:      "birthday",
	Height:        "height",
	Weight:        "weight",
	Email:         "email",
	RegType:       "reg_type",
	RegIP:         "reg_ip",
	Avatar:        "avatar",
	AvatarBig:     "avatar_big",
	Province:      "province",
	MySlogan:      "my_slogan",
	City:          "city",
	Extradata:     "extradata",
	Status:        "status",
	LNG:           "lng",
	Lat:           "lat",
	Logintime:     "logintime",
	LastLogintime: "last_logintime",
	Appkey:        "appkey",
	Tuuid:         "tuuid",
	Guide:         "guide",
	RunType:       "runType",
	NoPhone:       "no_phone",
	UnitOfWeight:  "unit_of_weight",
	GuideA1pro:    "guide_a1pro",
	Active:        "active",
	DeviceToken:   "deviceToken",
	WeightTarget:  "weight_target",
}

var XJUserTableColumns = struct {
	ID            string
	XJID          string
	Phone         string
	PWD           string
	Nickname      string
	Brand         string
	IMEI          string
	Regdate       string
	Gender        string
	Age           string
	Birthday      string
	Height        string
	Weight        string
	Email         string
	RegType       string
	RegIP         string
	Avatar        string
	AvatarBig     string
	Province      string
	MySlogan      string
	City          string
	Extradata     string
	Status        string
	LNG           string
	Lat           string
	Logintime     string
	LastLogintime string
	Appkey        string
	Tuuid         string
	Guide         string
	RunType       string
	NoPhone       string
	UnitOfWeight  string
	GuideA1pro    string
	Active        string
	DeviceToken   string
	WeightTarget  string
}{
	ID:            "xj_user.id",
	XJID:          "xj_user.xj_id",
	Phone:         "xj_user.phone",
	PWD:           "xj_user.pwd",
	Nickname:      "xj_user.nickname",
	Brand:         "xj_user.brand",
	IMEI:          "xj_user.IMEI",
	Regdate:       "xj_user.regdate",
	Gender:        "xj_user.gender",
	Age:           "xj_user.age",
	Birthday:      "xj_user.birthday",
	Height:        "xj_user.height",
	Weight:        "xj_user.weight",
	Email:         "xj_user.email",
	RegType:       "xj_user.reg_type",
	RegIP:         "xj_user.reg_ip",
	Avatar:        "xj_user.avatar",
	AvatarBig:     "xj_user.avatar_big",
	Province:      "xj_user.province",
	MySlogan:      "xj_user.my_slogan",
	City:          "xj_user.city",
	Extradata:     "xj_user.extradata",
	Status:        "xj_user.status",
	LNG:           "xj_user.lng",
	Lat:           "xj_user.lat",
	Logintime:     "xj_user.logintime",
	LastLogintime: "xj_user.last_logintime",
	Appkey:        "xj_user.appkey",
	Tuuid:         "xj_user.tuuid",
	Guide:         "xj_user.guide",
	RunType:       "xj_user.runType",
	NoPhone:       "xj_user.no_phone",
	UnitOfWeight:  "xj_user.unit_of_weight",
	GuideA1pro:    "xj_user.guide_a1pro",
	Active:        "xj_user.active",
	DeviceToken:   "xj_user.deviceToken",
	WeightTarget:  "xj_user.weight_target",
}

// Generated where

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int8 struct{ field string }

func (w whereHelpernull_Int8) EQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int8) NEQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int8) LT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int8) LTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int8) GT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int8) GTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int8) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int8) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Uint8 struct{ field string }

func (w whereHelpernull_Uint8) EQ(x null.Uint8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint8) NEQ(x null.Uint8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint8) LT(x null.Uint8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint8) LTE(x null.Uint8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint8) GT(x null.Uint8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint8) GTE(x null.Uint8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Uint8) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint8) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var XJUserWhere = struct {
	ID            whereHelperuint
	XJID          whereHelperuint
	Phone         whereHelperstring
	PWD           whereHelperstring
	Nickname      whereHelpernull_String
	Brand         whereHelperstring
	IMEI          whereHelperstring
	Regdate       whereHelpertime_Time
	Gender        whereHelpernull_String
	Age           whereHelpernull_Int8
	Birthday      whereHelpernull_String
	Height        whereHelpernull_String
	Weight        whereHelpernull_String
	Email         whereHelpernull_String
	RegType       whereHelpernull_String
	RegIP         whereHelpernull_String
	Avatar        whereHelpernull_String
	AvatarBig     whereHelpernull_String
	Province      whereHelpernull_String
	MySlogan      whereHelpernull_String
	City          whereHelpernull_String
	Extradata     whereHelpernull_String
	Status        whereHelpernull_Bool
	LNG           whereHelpertypes_NullDecimal
	Lat           whereHelpertypes_NullDecimal
	Logintime     whereHelpernull_Time
	LastLogintime whereHelpernull_Time
	Appkey        whereHelpernull_String
	Tuuid         whereHelpernull_String
	Guide         whereHelpernull_Bool
	RunType       whereHelpernull_Uint8
	NoPhone       whereHelpernull_Int8
	UnitOfWeight  whereHelpernull_Int8
	GuideA1pro    whereHelpernull_String
	Active        whereHelpernull_Int8
	DeviceToken   whereHelpernull_String
	WeightTarget  whereHelpernull_String
}{
	ID:            whereHelperuint{field: "`xj_user`.`id`"},
	XJID:          whereHelperuint{field: "`xj_user`.`xj_id`"},
	Phone:         whereHelperstring{field: "`xj_user`.`phone`"},
	PWD:           whereHelperstring{field: "`xj_user`.`pwd`"},
	Nickname:      whereHelpernull_String{field: "`xj_user`.`nickname`"},
	Brand:         whereHelperstring{field: "`xj_user`.`brand`"},
	IMEI:          whereHelperstring{field: "`xj_user`.`IMEI`"},
	Regdate:       whereHelpertime_Time{field: "`xj_user`.`regdate`"},
	Gender:        whereHelpernull_String{field: "`xj_user`.`gender`"},
	Age:           whereHelpernull_Int8{field: "`xj_user`.`age`"},
	Birthday:      whereHelpernull_String{field: "`xj_user`.`birthday`"},
	Height:        whereHelpernull_String{field: "`xj_user`.`height`"},
	Weight:        whereHelpernull_String{field: "`xj_user`.`weight`"},
	Email:         whereHelpernull_String{field: "`xj_user`.`email`"},
	RegType:       whereHelpernull_String{field: "`xj_user`.`reg_type`"},
	RegIP:         whereHelpernull_String{field: "`xj_user`.`reg_ip`"},
	Avatar:        whereHelpernull_String{field: "`xj_user`.`avatar`"},
	AvatarBig:     whereHelpernull_String{field: "`xj_user`.`avatar_big`"},
	Province:      whereHelpernull_String{field: "`xj_user`.`province`"},
	MySlogan:      whereHelpernull_String{field: "`xj_user`.`my_slogan`"},
	City:          whereHelpernull_String{field: "`xj_user`.`city`"},
	Extradata:     whereHelpernull_String{field: "`xj_user`.`extradata`"},
	Status:        whereHelpernull_Bool{field: "`xj_user`.`status`"},
	LNG:           whereHelpertypes_NullDecimal{field: "`xj_user`.`lng`"},
	Lat:           whereHelpertypes_NullDecimal{field: "`xj_user`.`lat`"},
	Logintime:     whereHelpernull_Time{field: "`xj_user`.`logintime`"},
	LastLogintime: whereHelpernull_Time{field: "`xj_user`.`last_logintime`"},
	Appkey:        whereHelpernull_String{field: "`xj_user`.`appkey`"},
	Tuuid:         whereHelpernull_String{field: "`xj_user`.`tuuid`"},
	Guide:         whereHelpernull_Bool{field: "`xj_user`.`guide`"},
	RunType:       whereHelpernull_Uint8{field: "`xj_user`.`runType`"},
	NoPhone:       whereHelpernull_Int8{field: "`xj_user`.`no_phone`"},
	UnitOfWeight:  whereHelpernull_Int8{field: "`xj_user`.`unit_of_weight`"},
	GuideA1pro:    whereHelpernull_String{field: "`xj_user`.`guide_a1pro`"},
	Active:        whereHelpernull_Int8{field: "`xj_user`.`active`"},
	DeviceToken:   whereHelpernull_String{field: "`xj_user`.`deviceToken`"},
	WeightTarget:  whereHelpernull_String{field: "`xj_user`.`weight_target`"},
}

// XJUserRels is where relationship names are stored.
var XJUserRels = struct {
}{}

// xjUserR is where relationships are stored.
type xjUserR struct {
}

// NewStruct creates a new relationship struct
func (*xjUserR) NewStruct() *xjUserR {
	return &xjUserR{}
}

// xjUserL is where Load methods for each relationship are stored.
type xjUserL struct{}

var (
	xjUserAllColumns            = []string{"id", "xj_id", "phone", "pwd", "nickname", "brand", "IMEI", "regdate", "gender", "age", "birthday", "height", "weight", "email", "reg_type", "reg_ip", "avatar", "avatar_big", "province", "my_slogan", "city", "extradata", "status", "lng", "lat", "logintime", "last_logintime", "appkey", "tuuid", "guide", "runType", "no_phone", "unit_of_weight", "guide_a1pro", "active", "deviceToken", "weight_target"}
	xjUserColumnsWithoutDefault = []string{"xj_id", "phone", "pwd", "nickname", "brand", "IMEI", "regdate", "age", "birthday", "height", "weight", "email", "reg_type", "reg_ip", "avatar", "avatar_big", "province", "my_slogan", "city", "extradata", "lng", "lat", "logintime", "last_logintime", "appkey", "tuuid", "deviceToken", "weight_target"}
	xjUserColumnsWithDefault    = []string{"id", "gender", "status", "guide", "runType", "no_phone", "unit_of_weight", "guide_a1pro", "active"}
	xjUserPrimaryKeyColumns     = []string{"id"}
)

type (
	// XJUserSlice is an alias for a slice of pointers to XJUser.
	// This should almost always be used instead of []XJUser.
	XJUserSlice []*XJUser
	// XJUserHook is the signature for custom XJUser hook methods
	XJUserHook func(boil.Executor, *XJUser) error

	xjUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	xjUserType                 = reflect.TypeOf(&XJUser{})
	xjUserMapping              = queries.MakeStructMapping(xjUserType)
	xjUserPrimaryKeyMapping, _ = queries.BindMapping(xjUserType, xjUserMapping, xjUserPrimaryKeyColumns)
	xjUserInsertCacheMut       sync.RWMutex
	xjUserInsertCache          = make(map[string]insertCache)
	xjUserUpdateCacheMut       sync.RWMutex
	xjUserUpdateCache          = make(map[string]updateCache)
	xjUserUpsertCacheMut       sync.RWMutex
	xjUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var xjUserBeforeInsertHooks []XJUserHook
var xjUserBeforeUpdateHooks []XJUserHook
var xjUserBeforeDeleteHooks []XJUserHook
var xjUserBeforeUpsertHooks []XJUserHook

var xjUserAfterInsertHooks []XJUserHook
var xjUserAfterSelectHooks []XJUserHook
var xjUserAfterUpdateHooks []XJUserHook
var xjUserAfterDeleteHooks []XJUserHook
var xjUserAfterUpsertHooks []XJUserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *XJUser) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *XJUser) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *XJUser) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *XJUser) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *XJUser) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *XJUser) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *XJUser) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *XJUser) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *XJUser) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddXJUserHook registers your hook function for all future operations.
func AddXJUserHook(hookPoint boil.HookPoint, xjUserHook XJUserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		xjUserBeforeInsertHooks = append(xjUserBeforeInsertHooks, xjUserHook)
	case boil.BeforeUpdateHook:
		xjUserBeforeUpdateHooks = append(xjUserBeforeUpdateHooks, xjUserHook)
	case boil.BeforeDeleteHook:
		xjUserBeforeDeleteHooks = append(xjUserBeforeDeleteHooks, xjUserHook)
	case boil.BeforeUpsertHook:
		xjUserBeforeUpsertHooks = append(xjUserBeforeUpsertHooks, xjUserHook)
	case boil.AfterInsertHook:
		xjUserAfterInsertHooks = append(xjUserAfterInsertHooks, xjUserHook)
	case boil.AfterSelectHook:
		xjUserAfterSelectHooks = append(xjUserAfterSelectHooks, xjUserHook)
	case boil.AfterUpdateHook:
		xjUserAfterUpdateHooks = append(xjUserAfterUpdateHooks, xjUserHook)
	case boil.AfterDeleteHook:
		xjUserAfterDeleteHooks = append(xjUserAfterDeleteHooks, xjUserHook)
	case boil.AfterUpsertHook:
		xjUserAfterUpsertHooks = append(xjUserAfterUpsertHooks, xjUserHook)
	}
}

// OneG returns a single xjUser record from the query using the global executor.
func (q xjUserQuery) OneG() (*XJUser, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single xjUser record from the query using the global executor, and panics on error.
func (q xjUserQuery) OneGP() *XJUser {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single xjUser record from the query, and panics on error.
func (q xjUserQuery) OneP(exec boil.Executor) *XJUser {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single xjUser record from the query.
func (q xjUserQuery) One(exec boil.Executor) (*XJUser, error) {
	o := &XJUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "persistence: failed to execute a one query for xj_user")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all XJUser records from the query using the global executor.
func (q xjUserQuery) AllG() (XJUserSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all XJUser records from the query using the global executor, and panics on error.
func (q xjUserQuery) AllGP() XJUserSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all XJUser records from the query, and panics on error.
func (q xjUserQuery) AllP(exec boil.Executor) XJUserSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all XJUser records from the query.
func (q xjUserQuery) All(exec boil.Executor) (XJUserSlice, error) {
	var o []*XJUser

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "persistence: failed to assign all query results to XJUser slice")
	}

	if len(xjUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all XJUser records in the query, and panics on error.
func (q xjUserQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all XJUser records in the query using the global executor, and panics on error.
func (q xjUserQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all XJUser records in the query, and panics on error.
func (q xjUserQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all XJUser records in the query.
func (q xjUserQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to count xj_user rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q xjUserQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q xjUserQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q xjUserQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q xjUserQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "persistence: failed to check if xj_user exists")
	}

	return count > 0, nil
}

// XJUsers retrieves all the records using an executor.
func XJUsers(mods ...qm.QueryMod) xjUserQuery {
	mods = append(mods, qm.From("`xj_user`"))
	return xjUserQuery{NewQuery(mods...)}
}

// FindXJUserG retrieves a single record by ID.
func FindXJUserG(iD uint, selectCols ...string) (*XJUser, error) {
	return FindXJUser(boil.GetDB(), iD, selectCols...)
}

// FindXJUserP retrieves a single record by ID with an executor, and panics on error.
func FindXJUserP(exec boil.Executor, iD uint, selectCols ...string) *XJUser {
	retobj, err := FindXJUser(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindXJUserGP retrieves a single record by ID, and panics on error.
func FindXJUserGP(iD uint, selectCols ...string) *XJUser {
	retobj, err := FindXJUser(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindXJUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindXJUser(exec boil.Executor, iD uint, selectCols ...string) (*XJUser, error) {
	xjUserObj := &XJUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `xj_user` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, xjUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "persistence: unable to select from xj_user")
	}

	if err = xjUserObj.doAfterSelectHooks(exec); err != nil {
		return xjUserObj, err
	}

	return xjUserObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *XJUser) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *XJUser) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *XJUser) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *XJUser) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("persistence: no xj_user provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xjUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	xjUserInsertCacheMut.RLock()
	cache, cached := xjUserInsertCache[key]
	xjUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			xjUserAllColumns,
			xjUserColumnsWithDefault,
			xjUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(xjUserType, xjUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(xjUserType, xjUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `xj_user` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `xj_user` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `xj_user` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, xjUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "persistence: unable to insert into xj_user")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == xjUserMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to populate default values for xj_user")
	}

CacheNoHooks:
	if !cached {
		xjUserInsertCacheMut.Lock()
		xjUserInsertCache[key] = cache
		xjUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single XJUser record using the global executor.
// See Update for more documentation.
func (o *XJUser) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the XJUser, and panics on error.
// See Update for more documentation.
func (o *XJUser) UpdateP(exec boil.Executor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single XJUser record using the global executor. Panics on error.
// See Update for more documentation.
func (o *XJUser) UpdateGP(columns boil.Columns) int64 {
	rowsAff, err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the XJUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *XJUser) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	xjUserUpdateCacheMut.RLock()
	cache, cached := xjUserUpdateCache[key]
	xjUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			xjUserAllColumns,
			xjUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("persistence: unable to update xj_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `xj_user` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, xjUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(xjUserType, xjUserMapping, append(wl, xjUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to update xj_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by update for xj_user")
	}

	if !cached {
		xjUserUpdateCacheMut.Lock()
		xjUserUpdateCache[key] = cache
		xjUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q xjUserQuery) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q xjUserQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q xjUserQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to update all for xj_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to retrieve rows affected for xj_user")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o XJUserSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o XJUserSlice) UpdateAllGP(cols M) int64 {
	rowsAff, err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o XJUserSlice) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o XJUserSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("persistence: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xjUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `xj_user` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, xjUserPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to update all in xjUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to retrieve rows affected all in update all xjUser")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *XJUser) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *XJUser) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *XJUser) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLXJUserUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *XJUser) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("persistence: no xj_user provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xjUserColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLXJUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	xjUserUpsertCacheMut.RLock()
	cache, cached := xjUserUpsertCache[key]
	xjUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			xjUserAllColumns,
			xjUserColumnsWithDefault,
			xjUserColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			xjUserAllColumns,
			xjUserPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("persistence: unable to upsert xj_user, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`xj_user`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `xj_user` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(xjUserType, xjUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(xjUserType, xjUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "persistence: unable to upsert for xj_user")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == xjUserMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(xjUserType, xjUserMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to retrieve unique values for xj_user")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to populate default values for xj_user")
	}

CacheNoHooks:
	if !cached {
		xjUserUpsertCacheMut.Lock()
		xjUserUpsertCache[key] = cache
		xjUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single XJUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *XJUser) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single XJUser record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *XJUser) DeleteP(exec boil.Executor) int64 {
	rowsAff, err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single XJUser record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *XJUser) DeleteGP() int64 {
	rowsAff, err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single XJUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *XJUser) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("persistence: no XJUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), xjUserPrimaryKeyMapping)
	sql := "DELETE FROM `xj_user` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to delete from xj_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by delete for xj_user")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q xjUserQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q xjUserQuery) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q xjUserQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("persistence: no xjUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to delete all from xj_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by deleteall for xj_user")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o XJUserSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o XJUserSlice) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o XJUserSlice) DeleteAllGP() int64 {
	rowsAff, err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o XJUserSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(xjUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xjUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `xj_user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, xjUserPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to delete all from xjUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by deleteall for xj_user")
	}

	if len(xjUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *XJUser) ReloadG() error {
	if o == nil {
		return errors.New("persistence: no XJUser provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *XJUser) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *XJUser) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *XJUser) Reload(exec boil.Executor) error {
	ret, err := FindXJUser(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *XJUserSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("persistence: empty XJUserSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *XJUserSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *XJUserSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *XJUserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := XJUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xjUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `xj_user`.* FROM `xj_user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, xjUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to reload all in XJUserSlice")
	}

	*o = slice

	return nil
}

// XJUserExistsG checks if the XJUser row exists.
func XJUserExistsG(iD uint) (bool, error) {
	return XJUserExists(boil.GetDB(), iD)
}

// XJUserExistsP checks if the XJUser row exists. Panics on error.
func XJUserExistsP(exec boil.Executor, iD uint) bool {
	e, err := XJUserExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// XJUserExistsGP checks if the XJUser row exists. Panics on error.
func XJUserExistsGP(iD uint) bool {
	e, err := XJUserExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// XJUserExists checks if the XJUser row exists.
func XJUserExists(exec boil.Executor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `xj_user` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "persistence: unable to check if xj_user exists")
	}

	return exists, nil
}
