// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package persistence

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// XJUserDid is an object representing the database table.
type XJUserDid struct {
	ID       uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Did      string      `boil:"did" json:"did" toml:"did" yaml:"did"`
	XJID     uint        `boil:"xj_id" json:"xj_id" toml:"xj_id" yaml:"xj_id"`
	Model    null.String `boil:"model" json:"model,omitempty" toml:"model" yaml:"model,omitempty"`
	BindTime null.Time   `boil:"bind_time" json:"bind_time,omitempty" toml:"bind_time" yaml:"bind_time,omitempty"`
	AddTime  null.Time   `boil:"add_time" json:"add_time,omitempty" toml:"add_time" yaml:"add_time,omitempty"`
	// 来源设备
	App null.Int8 `boil:"app" json:"app,omitempty" toml:"app" yaml:"app,omitempty"`
	// 1阿里云iot设备 2米家iot设备 3蓝牙设备
	Type  null.Int8   `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	IotID null.String `boil:"iot_id" json:"iot_id,omitempty" toml:"iot_id" yaml:"iot_id,omitempty"`
	// ios设备唯一码
	UUID null.String `boil:"uuid" json:"uuid,omitempty" toml:"uuid" yaml:"uuid,omitempty"`
	// app缓存数据
	CacheJson null.String `boil:"cacheJson" json:"cacheJson,omitempty" toml:"cacheJson" yaml:"cacheJson,omitempty"`
	// 产品id
	ProductId null.Int `boil:"productId" json:"productId,omitempty" toml:"productId" yaml:"productId,omitempty"`
	// 设备名称
	Name null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *xjUserDidR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L xjUserDidL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var XJUserDidColumns = struct {
	ID        string
	Did       string
	XJID      string
	Model     string
	BindTime  string
	AddTime   string
	App       string
	Type      string
	IotID     string
	UUID      string
	CacheJson string
	ProductId string
	Name      string
}{
	ID:        "id",
	Did:       "did",
	XJID:      "xj_id",
	Model:     "model",
	BindTime:  "bind_time",
	AddTime:   "add_time",
	App:       "app",
	Type:      "type",
	IotID:     "iot_id",
	UUID:      "uuid",
	CacheJson: "cacheJson",
	ProductId: "productId",
	Name:      "name",
}

var XJUserDidTableColumns = struct {
	ID        string
	Did       string
	XJID      string
	Model     string
	BindTime  string
	AddTime   string
	App       string
	Type      string
	IotID     string
	UUID      string
	CacheJson string
	ProductId string
	Name      string
}{
	ID:        "xj_user_did.id",
	Did:       "xj_user_did.did",
	XJID:      "xj_user_did.xj_id",
	Model:     "xj_user_did.model",
	BindTime:  "xj_user_did.bind_time",
	AddTime:   "xj_user_did.add_time",
	App:       "xj_user_did.app",
	Type:      "xj_user_did.type",
	IotID:     "xj_user_did.iot_id",
	UUID:      "xj_user_did.uuid",
	CacheJson: "xj_user_did.cacheJson",
	ProductId: "xj_user_did.productId",
	Name:      "xj_user_did.name",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var XJUserDidWhere = struct {
	ID        whereHelperuint
	Did       whereHelperstring
	XJID      whereHelperuint
	Model     whereHelpernull_String
	BindTime  whereHelpernull_Time
	AddTime   whereHelpernull_Time
	App       whereHelpernull_Int8
	Type      whereHelpernull_Int8
	IotID     whereHelpernull_String
	UUID      whereHelpernull_String
	CacheJson whereHelpernull_String
	ProductId whereHelpernull_Int
	Name      whereHelpernull_String
}{
	ID:        whereHelperuint{field: "`xj_user_did`.`id`"},
	Did:       whereHelperstring{field: "`xj_user_did`.`did`"},
	XJID:      whereHelperuint{field: "`xj_user_did`.`xj_id`"},
	Model:     whereHelpernull_String{field: "`xj_user_did`.`model`"},
	BindTime:  whereHelpernull_Time{field: "`xj_user_did`.`bind_time`"},
	AddTime:   whereHelpernull_Time{field: "`xj_user_did`.`add_time`"},
	App:       whereHelpernull_Int8{field: "`xj_user_did`.`app`"},
	Type:      whereHelpernull_Int8{field: "`xj_user_did`.`type`"},
	IotID:     whereHelpernull_String{field: "`xj_user_did`.`iot_id`"},
	UUID:      whereHelpernull_String{field: "`xj_user_did`.`uuid`"},
	CacheJson: whereHelpernull_String{field: "`xj_user_did`.`cacheJson`"},
	ProductId: whereHelpernull_Int{field: "`xj_user_did`.`productId`"},
	Name:      whereHelpernull_String{field: "`xj_user_did`.`name`"},
}

// XJUserDidRels is where relationship names are stored.
var XJUserDidRels = struct {
}{}

// xjUserDidR is where relationships are stored.
type xjUserDidR struct {
}

// NewStruct creates a new relationship struct
func (*xjUserDidR) NewStruct() *xjUserDidR {
	return &xjUserDidR{}
}

// xjUserDidL is where Load methods for each relationship are stored.
type xjUserDidL struct{}

var (
	xjUserDidAllColumns            = []string{"id", "did", "xj_id", "model", "bind_time", "add_time", "app", "type", "iot_id", "uuid", "cacheJson", "productId", "name"}
	xjUserDidColumnsWithoutDefault = []string{"did", "xj_id", "model", "bind_time", "add_time", "iot_id", "uuid", "cacheJson", "productId", "name"}
	xjUserDidColumnsWithDefault    = []string{"id", "app", "type"}
	xjUserDidPrimaryKeyColumns     = []string{"id"}
)

type (
	// XJUserDidSlice is an alias for a slice of pointers to XJUserDid.
	// This should almost always be used instead of []XJUserDid.
	XJUserDidSlice []*XJUserDid
	// XJUserDidHook is the signature for custom XJUserDid hook methods
	XJUserDidHook func(boil.Executor, *XJUserDid) error

	xjUserDidQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	xjUserDidType                 = reflect.TypeOf(&XJUserDid{})
	xjUserDidMapping              = queries.MakeStructMapping(xjUserDidType)
	xjUserDidPrimaryKeyMapping, _ = queries.BindMapping(xjUserDidType, xjUserDidMapping, xjUserDidPrimaryKeyColumns)
	xjUserDidInsertCacheMut       sync.RWMutex
	xjUserDidInsertCache          = make(map[string]insertCache)
	xjUserDidUpdateCacheMut       sync.RWMutex
	xjUserDidUpdateCache          = make(map[string]updateCache)
	xjUserDidUpsertCacheMut       sync.RWMutex
	xjUserDidUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var xjUserDidBeforeInsertHooks []XJUserDidHook
var xjUserDidBeforeUpdateHooks []XJUserDidHook
var xjUserDidBeforeDeleteHooks []XJUserDidHook
var xjUserDidBeforeUpsertHooks []XJUserDidHook

var xjUserDidAfterInsertHooks []XJUserDidHook
var xjUserDidAfterSelectHooks []XJUserDidHook
var xjUserDidAfterUpdateHooks []XJUserDidHook
var xjUserDidAfterDeleteHooks []XJUserDidHook
var xjUserDidAfterUpsertHooks []XJUserDidHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *XJUserDid) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserDidBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *XJUserDid) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserDidBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *XJUserDid) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserDidBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *XJUserDid) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserDidBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *XJUserDid) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserDidAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *XJUserDid) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserDidAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *XJUserDid) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserDidAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *XJUserDid) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserDidAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *XJUserDid) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserDidAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddXJUserDidHook registers your hook function for all future operations.
func AddXJUserDidHook(hookPoint boil.HookPoint, xjUserDidHook XJUserDidHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		xjUserDidBeforeInsertHooks = append(xjUserDidBeforeInsertHooks, xjUserDidHook)
	case boil.BeforeUpdateHook:
		xjUserDidBeforeUpdateHooks = append(xjUserDidBeforeUpdateHooks, xjUserDidHook)
	case boil.BeforeDeleteHook:
		xjUserDidBeforeDeleteHooks = append(xjUserDidBeforeDeleteHooks, xjUserDidHook)
	case boil.BeforeUpsertHook:
		xjUserDidBeforeUpsertHooks = append(xjUserDidBeforeUpsertHooks, xjUserDidHook)
	case boil.AfterInsertHook:
		xjUserDidAfterInsertHooks = append(xjUserDidAfterInsertHooks, xjUserDidHook)
	case boil.AfterSelectHook:
		xjUserDidAfterSelectHooks = append(xjUserDidAfterSelectHooks, xjUserDidHook)
	case boil.AfterUpdateHook:
		xjUserDidAfterUpdateHooks = append(xjUserDidAfterUpdateHooks, xjUserDidHook)
	case boil.AfterDeleteHook:
		xjUserDidAfterDeleteHooks = append(xjUserDidAfterDeleteHooks, xjUserDidHook)
	case boil.AfterUpsertHook:
		xjUserDidAfterUpsertHooks = append(xjUserDidAfterUpsertHooks, xjUserDidHook)
	}
}

// OneG returns a single xjUserDid record from the query using the global executor.
func (q xjUserDidQuery) OneG() (*XJUserDid, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single xjUserDid record from the query using the global executor, and panics on error.
func (q xjUserDidQuery) OneGP() *XJUserDid {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single xjUserDid record from the query, and panics on error.
func (q xjUserDidQuery) OneP(exec boil.Executor) *XJUserDid {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single xjUserDid record from the query.
func (q xjUserDidQuery) One(exec boil.Executor) (*XJUserDid, error) {
	o := &XJUserDid{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "persistence: failed to execute a one query for xj_user_did")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all XJUserDid records from the query using the global executor.
func (q xjUserDidQuery) AllG() (XJUserDidSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all XJUserDid records from the query using the global executor, and panics on error.
func (q xjUserDidQuery) AllGP() XJUserDidSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all XJUserDid records from the query, and panics on error.
func (q xjUserDidQuery) AllP(exec boil.Executor) XJUserDidSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all XJUserDid records from the query.
func (q xjUserDidQuery) All(exec boil.Executor) (XJUserDidSlice, error) {
	var o []*XJUserDid

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "persistence: failed to assign all query results to XJUserDid slice")
	}

	if len(xjUserDidAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all XJUserDid records in the query, and panics on error.
func (q xjUserDidQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all XJUserDid records in the query using the global executor, and panics on error.
func (q xjUserDidQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all XJUserDid records in the query, and panics on error.
func (q xjUserDidQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all XJUserDid records in the query.
func (q xjUserDidQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to count xj_user_did rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q xjUserDidQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q xjUserDidQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q xjUserDidQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q xjUserDidQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "persistence: failed to check if xj_user_did exists")
	}

	return count > 0, nil
}

// XJUserDids retrieves all the records using an executor.
func XJUserDids(mods ...qm.QueryMod) xjUserDidQuery {
	mods = append(mods, qm.From("`xj_user_did`"))
	return xjUserDidQuery{NewQuery(mods...)}
}

// FindXJUserDidG retrieves a single record by ID.
func FindXJUserDidG(iD uint, selectCols ...string) (*XJUserDid, error) {
	return FindXJUserDid(boil.GetDB(), iD, selectCols...)
}

// FindXJUserDidP retrieves a single record by ID with an executor, and panics on error.
func FindXJUserDidP(exec boil.Executor, iD uint, selectCols ...string) *XJUserDid {
	retobj, err := FindXJUserDid(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindXJUserDidGP retrieves a single record by ID, and panics on error.
func FindXJUserDidGP(iD uint, selectCols ...string) *XJUserDid {
	retobj, err := FindXJUserDid(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindXJUserDid retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindXJUserDid(exec boil.Executor, iD uint, selectCols ...string) (*XJUserDid, error) {
	xjUserDidObj := &XJUserDid{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `xj_user_did` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, xjUserDidObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "persistence: unable to select from xj_user_did")
	}

	if err = xjUserDidObj.doAfterSelectHooks(exec); err != nil {
		return xjUserDidObj, err
	}

	return xjUserDidObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *XJUserDid) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *XJUserDid) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *XJUserDid) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *XJUserDid) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("persistence: no xj_user_did provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xjUserDidColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	xjUserDidInsertCacheMut.RLock()
	cache, cached := xjUserDidInsertCache[key]
	xjUserDidInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			xjUserDidAllColumns,
			xjUserDidColumnsWithDefault,
			xjUserDidColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(xjUserDidType, xjUserDidMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(xjUserDidType, xjUserDidMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `xj_user_did` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `xj_user_did` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `xj_user_did` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, xjUserDidPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "persistence: unable to insert into xj_user_did")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == xjUserDidMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to populate default values for xj_user_did")
	}

CacheNoHooks:
	if !cached {
		xjUserDidInsertCacheMut.Lock()
		xjUserDidInsertCache[key] = cache
		xjUserDidInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single XJUserDid record using the global executor.
// See Update for more documentation.
func (o *XJUserDid) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the XJUserDid, and panics on error.
// See Update for more documentation.
func (o *XJUserDid) UpdateP(exec boil.Executor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single XJUserDid record using the global executor. Panics on error.
// See Update for more documentation.
func (o *XJUserDid) UpdateGP(columns boil.Columns) int64 {
	rowsAff, err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the XJUserDid.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *XJUserDid) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	xjUserDidUpdateCacheMut.RLock()
	cache, cached := xjUserDidUpdateCache[key]
	xjUserDidUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			xjUserDidAllColumns,
			xjUserDidPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("persistence: unable to update xj_user_did, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `xj_user_did` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, xjUserDidPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(xjUserDidType, xjUserDidMapping, append(wl, xjUserDidPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to update xj_user_did row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by update for xj_user_did")
	}

	if !cached {
		xjUserDidUpdateCacheMut.Lock()
		xjUserDidUpdateCache[key] = cache
		xjUserDidUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q xjUserDidQuery) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q xjUserDidQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q xjUserDidQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to update all for xj_user_did")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to retrieve rows affected for xj_user_did")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o XJUserDidSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o XJUserDidSlice) UpdateAllGP(cols M) int64 {
	rowsAff, err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o XJUserDidSlice) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o XJUserDidSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("persistence: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xjUserDidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `xj_user_did` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, xjUserDidPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to update all in xjUserDid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to retrieve rows affected all in update all xjUserDid")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *XJUserDid) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *XJUserDid) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *XJUserDid) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLXJUserDidUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *XJUserDid) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("persistence: no xj_user_did provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xjUserDidColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLXJUserDidUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	xjUserDidUpsertCacheMut.RLock()
	cache, cached := xjUserDidUpsertCache[key]
	xjUserDidUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			xjUserDidAllColumns,
			xjUserDidColumnsWithDefault,
			xjUserDidColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			xjUserDidAllColumns,
			xjUserDidPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("persistence: unable to upsert xj_user_did, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`xj_user_did`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `xj_user_did` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(xjUserDidType, xjUserDidMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(xjUserDidType, xjUserDidMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "persistence: unable to upsert for xj_user_did")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == xjUserDidMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(xjUserDidType, xjUserDidMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to retrieve unique values for xj_user_did")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to populate default values for xj_user_did")
	}

CacheNoHooks:
	if !cached {
		xjUserDidUpsertCacheMut.Lock()
		xjUserDidUpsertCache[key] = cache
		xjUserDidUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single XJUserDid record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *XJUserDid) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single XJUserDid record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *XJUserDid) DeleteP(exec boil.Executor) int64 {
	rowsAff, err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single XJUserDid record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *XJUserDid) DeleteGP() int64 {
	rowsAff, err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single XJUserDid record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *XJUserDid) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("persistence: no XJUserDid provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), xjUserDidPrimaryKeyMapping)
	sql := "DELETE FROM `xj_user_did` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to delete from xj_user_did")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by delete for xj_user_did")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q xjUserDidQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q xjUserDidQuery) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q xjUserDidQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("persistence: no xjUserDidQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to delete all from xj_user_did")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by deleteall for xj_user_did")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o XJUserDidSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o XJUserDidSlice) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o XJUserDidSlice) DeleteAllGP() int64 {
	rowsAff, err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o XJUserDidSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(xjUserDidBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xjUserDidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `xj_user_did` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, xjUserDidPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to delete all from xjUserDid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by deleteall for xj_user_did")
	}

	if len(xjUserDidAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *XJUserDid) ReloadG() error {
	if o == nil {
		return errors.New("persistence: no XJUserDid provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *XJUserDid) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *XJUserDid) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *XJUserDid) Reload(exec boil.Executor) error {
	ret, err := FindXJUserDid(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *XJUserDidSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("persistence: empty XJUserDidSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *XJUserDidSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *XJUserDidSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *XJUserDidSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := XJUserDidSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xjUserDidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `xj_user_did`.* FROM `xj_user_did` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, xjUserDidPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to reload all in XJUserDidSlice")
	}

	*o = slice

	return nil
}

// XJUserDidExistsG checks if the XJUserDid row exists.
func XJUserDidExistsG(iD uint) (bool, error) {
	return XJUserDidExists(boil.GetDB(), iD)
}

// XJUserDidExistsP checks if the XJUserDid row exists. Panics on error.
func XJUserDidExistsP(exec boil.Executor, iD uint) bool {
	e, err := XJUserDidExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// XJUserDidExistsGP checks if the XJUserDid row exists. Panics on error.
func XJUserDidExistsGP(iD uint) bool {
	e, err := XJUserDidExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// XJUserDidExists checks if the XJUserDid row exists.
func XJUserDidExists(exec boil.Executor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `xj_user_did` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "persistence: unable to check if xj_user_did exists")
	}

	return exists, nil
}
