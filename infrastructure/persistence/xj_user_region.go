// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package persistence

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// XJUserRegion is an object representing the database table.
type XJUserRegion struct {
	ID   uint `boil:"id" json:"id" toml:"id" yaml:"id"`
	XJID uint `boil:"xj_id" json:"xj_id" toml:"xj_id" yaml:"xj_id"`
	// 注册ip
	RegIP      string      `boil:"reg_ip" json:"reg_ip" toml:"reg_ip" yaml:"reg_ip"`
	CityID     null.Int    `boil:"city_id" json:"city_id,omitempty" toml:"city_id" yaml:"city_id,omitempty"`
	Country    null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Region     null.String `boil:"region" json:"region,omitempty" toml:"region" yaml:"region,omitempty"`
	Province   null.String `boil:"province" json:"province,omitempty" toml:"province" yaml:"province,omitempty"`
	City       null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	Isp        null.String `boil:"isp" json:"isp,omitempty" toml:"isp" yaml:"isp,omitempty"`
	DecodeBody null.String `boil:"decode_body" json:"decode_body,omitempty" toml:"decode_body" yaml:"decode_body,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt  null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *xjUserRegionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L xjUserRegionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var XJUserRegionColumns = struct {
	ID         string
	XJID       string
	RegIP      string
	CityID     string
	Country    string
	Region     string
	Province   string
	City       string
	Isp        string
	DecodeBody string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	ID:         "id",
	XJID:       "xj_id",
	RegIP:      "reg_ip",
	CityID:     "city_id",
	Country:    "country",
	Region:     "region",
	Province:   "province",
	City:       "city",
	Isp:        "isp",
	DecodeBody: "decode_body",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
}

var XJUserRegionTableColumns = struct {
	ID         string
	XJID       string
	RegIP      string
	CityID     string
	Country    string
	Region     string
	Province   string
	City       string
	Isp        string
	DecodeBody string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	ID:         "xj_user_region.id",
	XJID:       "xj_user_region.xj_id",
	RegIP:      "xj_user_region.reg_ip",
	CityID:     "xj_user_region.city_id",
	Country:    "xj_user_region.country",
	Region:     "xj_user_region.region",
	Province:   "xj_user_region.province",
	City:       "xj_user_region.city",
	Isp:        "xj_user_region.isp",
	DecodeBody: "xj_user_region.decode_body",
	CreatedAt:  "xj_user_region.created_at",
	UpdatedAt:  "xj_user_region.updated_at",
	DeletedAt:  "xj_user_region.deleted_at",
}

// Generated where

var XJUserRegionWhere = struct {
	ID         whereHelperuint
	XJID       whereHelperuint
	RegIP      whereHelperstring
	CityID     whereHelpernull_Int
	Country    whereHelpernull_String
	Region     whereHelpernull_String
	Province   whereHelpernull_String
	City       whereHelpernull_String
	Isp        whereHelpernull_String
	DecodeBody whereHelpernull_String
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	DeletedAt  whereHelpernull_Time
}{
	ID:         whereHelperuint{field: "`xj_user_region`.`id`"},
	XJID:       whereHelperuint{field: "`xj_user_region`.`xj_id`"},
	RegIP:      whereHelperstring{field: "`xj_user_region`.`reg_ip`"},
	CityID:     whereHelpernull_Int{field: "`xj_user_region`.`city_id`"},
	Country:    whereHelpernull_String{field: "`xj_user_region`.`country`"},
	Region:     whereHelpernull_String{field: "`xj_user_region`.`region`"},
	Province:   whereHelpernull_String{field: "`xj_user_region`.`province`"},
	City:       whereHelpernull_String{field: "`xj_user_region`.`city`"},
	Isp:        whereHelpernull_String{field: "`xj_user_region`.`isp`"},
	DecodeBody: whereHelpernull_String{field: "`xj_user_region`.`decode_body`"},
	CreatedAt:  whereHelpertime_Time{field: "`xj_user_region`.`created_at`"},
	UpdatedAt:  whereHelpertime_Time{field: "`xj_user_region`.`updated_at`"},
	DeletedAt:  whereHelpernull_Time{field: "`xj_user_region`.`deleted_at`"},
}

// XJUserRegionRels is where relationship names are stored.
var XJUserRegionRels = struct {
}{}

// xjUserRegionR is where relationships are stored.
type xjUserRegionR struct {
}

// NewStruct creates a new relationship struct
func (*xjUserRegionR) NewStruct() *xjUserRegionR {
	return &xjUserRegionR{}
}

// xjUserRegionL is where Load methods for each relationship are stored.
type xjUserRegionL struct{}

var (
	xjUserRegionAllColumns            = []string{"id", "xj_id", "reg_ip", "city_id", "country", "region", "province", "city", "isp", "decode_body", "created_at", "updated_at", "deleted_at"}
	xjUserRegionColumnsWithoutDefault = []string{"xj_id", "reg_ip", "country", "region", "province", "city", "isp", "decode_body", "deleted_at"}
	xjUserRegionColumnsWithDefault    = []string{"id", "city_id", "created_at", "updated_at"}
	xjUserRegionPrimaryKeyColumns     = []string{"id"}
)

type (
	// XJUserRegionSlice is an alias for a slice of pointers to XJUserRegion.
	// This should almost always be used instead of []XJUserRegion.
	XJUserRegionSlice []*XJUserRegion
	// XJUserRegionHook is the signature for custom XJUserRegion hook methods
	XJUserRegionHook func(boil.Executor, *XJUserRegion) error

	xjUserRegionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	xjUserRegionType                 = reflect.TypeOf(&XJUserRegion{})
	xjUserRegionMapping              = queries.MakeStructMapping(xjUserRegionType)
	xjUserRegionPrimaryKeyMapping, _ = queries.BindMapping(xjUserRegionType, xjUserRegionMapping, xjUserRegionPrimaryKeyColumns)
	xjUserRegionInsertCacheMut       sync.RWMutex
	xjUserRegionInsertCache          = make(map[string]insertCache)
	xjUserRegionUpdateCacheMut       sync.RWMutex
	xjUserRegionUpdateCache          = make(map[string]updateCache)
	xjUserRegionUpsertCacheMut       sync.RWMutex
	xjUserRegionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var xjUserRegionBeforeInsertHooks []XJUserRegionHook
var xjUserRegionBeforeUpdateHooks []XJUserRegionHook
var xjUserRegionBeforeDeleteHooks []XJUserRegionHook
var xjUserRegionBeforeUpsertHooks []XJUserRegionHook

var xjUserRegionAfterInsertHooks []XJUserRegionHook
var xjUserRegionAfterSelectHooks []XJUserRegionHook
var xjUserRegionAfterUpdateHooks []XJUserRegionHook
var xjUserRegionAfterDeleteHooks []XJUserRegionHook
var xjUserRegionAfterUpsertHooks []XJUserRegionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *XJUserRegion) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserRegionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *XJUserRegion) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserRegionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *XJUserRegion) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserRegionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *XJUserRegion) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserRegionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *XJUserRegion) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserRegionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *XJUserRegion) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserRegionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *XJUserRegion) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserRegionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *XJUserRegion) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserRegionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *XJUserRegion) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range xjUserRegionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddXJUserRegionHook registers your hook function for all future operations.
func AddXJUserRegionHook(hookPoint boil.HookPoint, xjUserRegionHook XJUserRegionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		xjUserRegionBeforeInsertHooks = append(xjUserRegionBeforeInsertHooks, xjUserRegionHook)
	case boil.BeforeUpdateHook:
		xjUserRegionBeforeUpdateHooks = append(xjUserRegionBeforeUpdateHooks, xjUserRegionHook)
	case boil.BeforeDeleteHook:
		xjUserRegionBeforeDeleteHooks = append(xjUserRegionBeforeDeleteHooks, xjUserRegionHook)
	case boil.BeforeUpsertHook:
		xjUserRegionBeforeUpsertHooks = append(xjUserRegionBeforeUpsertHooks, xjUserRegionHook)
	case boil.AfterInsertHook:
		xjUserRegionAfterInsertHooks = append(xjUserRegionAfterInsertHooks, xjUserRegionHook)
	case boil.AfterSelectHook:
		xjUserRegionAfterSelectHooks = append(xjUserRegionAfterSelectHooks, xjUserRegionHook)
	case boil.AfterUpdateHook:
		xjUserRegionAfterUpdateHooks = append(xjUserRegionAfterUpdateHooks, xjUserRegionHook)
	case boil.AfterDeleteHook:
		xjUserRegionAfterDeleteHooks = append(xjUserRegionAfterDeleteHooks, xjUserRegionHook)
	case boil.AfterUpsertHook:
		xjUserRegionAfterUpsertHooks = append(xjUserRegionAfterUpsertHooks, xjUserRegionHook)
	}
}

// OneG returns a single xjUserRegion record from the query using the global executor.
func (q xjUserRegionQuery) OneG() (*XJUserRegion, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single xjUserRegion record from the query using the global executor, and panics on error.
func (q xjUserRegionQuery) OneGP() *XJUserRegion {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single xjUserRegion record from the query, and panics on error.
func (q xjUserRegionQuery) OneP(exec boil.Executor) *XJUserRegion {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single xjUserRegion record from the query.
func (q xjUserRegionQuery) One(exec boil.Executor) (*XJUserRegion, error) {
	o := &XJUserRegion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "persistence: failed to execute a one query for xj_user_region")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all XJUserRegion records from the query using the global executor.
func (q xjUserRegionQuery) AllG() (XJUserRegionSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all XJUserRegion records from the query using the global executor, and panics on error.
func (q xjUserRegionQuery) AllGP() XJUserRegionSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all XJUserRegion records from the query, and panics on error.
func (q xjUserRegionQuery) AllP(exec boil.Executor) XJUserRegionSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all XJUserRegion records from the query.
func (q xjUserRegionQuery) All(exec boil.Executor) (XJUserRegionSlice, error) {
	var o []*XJUserRegion

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "persistence: failed to assign all query results to XJUserRegion slice")
	}

	if len(xjUserRegionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all XJUserRegion records in the query, and panics on error.
func (q xjUserRegionQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all XJUserRegion records in the query using the global executor, and panics on error.
func (q xjUserRegionQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all XJUserRegion records in the query, and panics on error.
func (q xjUserRegionQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all XJUserRegion records in the query.
func (q xjUserRegionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to count xj_user_region rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q xjUserRegionQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q xjUserRegionQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q xjUserRegionQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q xjUserRegionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "persistence: failed to check if xj_user_region exists")
	}

	return count > 0, nil
}

// XJUserRegions retrieves all the records using an executor.
func XJUserRegions(mods ...qm.QueryMod) xjUserRegionQuery {
	mods = append(mods, qm.From("`xj_user_region`"))
	return xjUserRegionQuery{NewQuery(mods...)}
}

// FindXJUserRegionG retrieves a single record by ID.
func FindXJUserRegionG(iD uint, selectCols ...string) (*XJUserRegion, error) {
	return FindXJUserRegion(boil.GetDB(), iD, selectCols...)
}

// FindXJUserRegionP retrieves a single record by ID with an executor, and panics on error.
func FindXJUserRegionP(exec boil.Executor, iD uint, selectCols ...string) *XJUserRegion {
	retobj, err := FindXJUserRegion(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindXJUserRegionGP retrieves a single record by ID, and panics on error.
func FindXJUserRegionGP(iD uint, selectCols ...string) *XJUserRegion {
	retobj, err := FindXJUserRegion(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindXJUserRegion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindXJUserRegion(exec boil.Executor, iD uint, selectCols ...string) (*XJUserRegion, error) {
	xjUserRegionObj := &XJUserRegion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `xj_user_region` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, xjUserRegionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "persistence: unable to select from xj_user_region")
	}

	if err = xjUserRegionObj.doAfterSelectHooks(exec); err != nil {
		return xjUserRegionObj, err
	}

	return xjUserRegionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *XJUserRegion) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *XJUserRegion) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *XJUserRegion) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *XJUserRegion) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("persistence: no xj_user_region provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xjUserRegionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	xjUserRegionInsertCacheMut.RLock()
	cache, cached := xjUserRegionInsertCache[key]
	xjUserRegionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			xjUserRegionAllColumns,
			xjUserRegionColumnsWithDefault,
			xjUserRegionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(xjUserRegionType, xjUserRegionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(xjUserRegionType, xjUserRegionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `xj_user_region` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `xj_user_region` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `xj_user_region` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, xjUserRegionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "persistence: unable to insert into xj_user_region")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == xjUserRegionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to populate default values for xj_user_region")
	}

CacheNoHooks:
	if !cached {
		xjUserRegionInsertCacheMut.Lock()
		xjUserRegionInsertCache[key] = cache
		xjUserRegionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single XJUserRegion record using the global executor.
// See Update for more documentation.
func (o *XJUserRegion) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the XJUserRegion, and panics on error.
// See Update for more documentation.
func (o *XJUserRegion) UpdateP(exec boil.Executor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single XJUserRegion record using the global executor. Panics on error.
// See Update for more documentation.
func (o *XJUserRegion) UpdateGP(columns boil.Columns) int64 {
	rowsAff, err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the XJUserRegion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *XJUserRegion) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	xjUserRegionUpdateCacheMut.RLock()
	cache, cached := xjUserRegionUpdateCache[key]
	xjUserRegionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			xjUserRegionAllColumns,
			xjUserRegionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("persistence: unable to update xj_user_region, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `xj_user_region` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, xjUserRegionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(xjUserRegionType, xjUserRegionMapping, append(wl, xjUserRegionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to update xj_user_region row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by update for xj_user_region")
	}

	if !cached {
		xjUserRegionUpdateCacheMut.Lock()
		xjUserRegionUpdateCache[key] = cache
		xjUserRegionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q xjUserRegionQuery) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q xjUserRegionQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q xjUserRegionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to update all for xj_user_region")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to retrieve rows affected for xj_user_region")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o XJUserRegionSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o XJUserRegionSlice) UpdateAllGP(cols M) int64 {
	rowsAff, err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o XJUserRegionSlice) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o XJUserRegionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("persistence: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xjUserRegionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `xj_user_region` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, xjUserRegionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to update all in xjUserRegion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to retrieve rows affected all in update all xjUserRegion")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *XJUserRegion) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *XJUserRegion) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *XJUserRegion) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLXJUserRegionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *XJUserRegion) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("persistence: no xj_user_region provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(xjUserRegionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLXJUserRegionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	xjUserRegionUpsertCacheMut.RLock()
	cache, cached := xjUserRegionUpsertCache[key]
	xjUserRegionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			xjUserRegionAllColumns,
			xjUserRegionColumnsWithDefault,
			xjUserRegionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			xjUserRegionAllColumns,
			xjUserRegionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("persistence: unable to upsert xj_user_region, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`xj_user_region`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `xj_user_region` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(xjUserRegionType, xjUserRegionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(xjUserRegionType, xjUserRegionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "persistence: unable to upsert for xj_user_region")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == xjUserRegionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(xjUserRegionType, xjUserRegionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to retrieve unique values for xj_user_region")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to populate default values for xj_user_region")
	}

CacheNoHooks:
	if !cached {
		xjUserRegionUpsertCacheMut.Lock()
		xjUserRegionUpsertCache[key] = cache
		xjUserRegionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single XJUserRegion record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *XJUserRegion) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single XJUserRegion record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *XJUserRegion) DeleteP(exec boil.Executor) int64 {
	rowsAff, err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single XJUserRegion record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *XJUserRegion) DeleteGP() int64 {
	rowsAff, err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single XJUserRegion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *XJUserRegion) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("persistence: no XJUserRegion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), xjUserRegionPrimaryKeyMapping)
	sql := "DELETE FROM `xj_user_region` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to delete from xj_user_region")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by delete for xj_user_region")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q xjUserRegionQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q xjUserRegionQuery) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q xjUserRegionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("persistence: no xjUserRegionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to delete all from xj_user_region")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by deleteall for xj_user_region")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o XJUserRegionSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o XJUserRegionSlice) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o XJUserRegionSlice) DeleteAllGP() int64 {
	rowsAff, err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o XJUserRegionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(xjUserRegionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xjUserRegionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `xj_user_region` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, xjUserRegionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "persistence: unable to delete all from xjUserRegion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "persistence: failed to get rows affected by deleteall for xj_user_region")
	}

	if len(xjUserRegionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *XJUserRegion) ReloadG() error {
	if o == nil {
		return errors.New("persistence: no XJUserRegion provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *XJUserRegion) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *XJUserRegion) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *XJUserRegion) Reload(exec boil.Executor) error {
	ret, err := FindXJUserRegion(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *XJUserRegionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("persistence: empty XJUserRegionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *XJUserRegionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *XJUserRegionSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *XJUserRegionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := XJUserRegionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), xjUserRegionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `xj_user_region`.* FROM `xj_user_region` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, xjUserRegionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "persistence: unable to reload all in XJUserRegionSlice")
	}

	*o = slice

	return nil
}

// XJUserRegionExistsG checks if the XJUserRegion row exists.
func XJUserRegionExistsG(iD uint) (bool, error) {
	return XJUserRegionExists(boil.GetDB(), iD)
}

// XJUserRegionExistsP checks if the XJUserRegion row exists. Panics on error.
func XJUserRegionExistsP(exec boil.Executor, iD uint) bool {
	e, err := XJUserRegionExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// XJUserRegionExistsGP checks if the XJUserRegion row exists. Panics on error.
func XJUserRegionExistsGP(iD uint) bool {
	e, err := XJUserRegionExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// XJUserRegionExists checks if the XJUserRegion row exists.
func XJUserRegionExists(exec boil.Executor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `xj_user_region` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "persistence: unable to check if xj_user_region exists")
	}

	return exists, nil
}
